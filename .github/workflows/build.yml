name: Build

on:
  push:
    branches: [ "master" ]
  schedule:
    - cron: '0 22 1 * *'

env:
  GHCR: ghcr.io
  DOCKER: docker.io
  IMAGENAME: no-ip2

jobs:
  vulerability-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Perform Scan
        uses: ShiftLeftSecurity/scan-action@master
  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - vulerability-scan
    if: >-
      ${{ !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]')
      }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract lowercase repository name
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.repository }}
        id: repository
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Build Builder
        shell: bash
        run: |
          export CI_PROJECT_DIR=${PWD}
          export CI_REGISTRY_IMAGE=${{ env.GHCR }}/${{ steps.repository.outputs.lowercase }}
          export BUILDX_PLATFORM=linux/amd64,linux/arm64,linux/arm/v7
          export CADVISOR_VERSION=$(curl -s https://api.github.com/repos/google/cadvisor/releases | jq -r "[[.[] | select(.draft != true) | select(.prerelease != true)][0]][0].name")
          export GO111MODULE=on
          export GO_FLAGS="-tags=netgo -buildvcs=false"
          export CGO_ENABLED="1"
          export OUTPUT_NAME_WITH_ARCH=false
          echo ${CI_REGISTRY_IMAGE}
          echo ${BUILDX_PLATFORM}
          echo ${CADVISOR_VERSION}
          echo #0
          git config --global --add safe.directory /go/src/github.com/google/cadvisor
          docker buildx build --platform=${BUILDX_PLATFORM} --cache-from ${{ env.GHCR }}/vremenar/cache/builder --cache-to ${{ env.GHCR }}/vremenar/cache/builder --build-arg CADVISOR_VERSION -f Dockerfile.builder -t ${{ env.GHCR }}/vremenar/builder --push "."
          echo #1
          git clone https://github.com/google/cadvisor
          cd cadvisor
          git checkout master
          go mod download
          ./build/assets.sh
          go get github.com/IBM/sarama@latest
          go mod tidy
          go mod download
          go mod vendor
          cd cmd
          go get github.com/IBM/sarama@latest
          go mod tidy
          go mod download
          go mod vendor
          cd ..
          echo step build
          cat go.mod
          mkdir -p amd64
          GOOS=linux GOARCH=amd64 ./build/build.sh amd64
          mv _output/cadvisor amd64/
          mkdir -p arm64
          sudo apt update -y 
          sudo apt install gcc-aarch64-linux-gnu -y
          GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc ./build/build.sh arm64
          mv _output/cadvisor arm64/
          go mod vendor
          rm -f cadvisor || true
          cd ..
          tar czf cadvisor.tar.gz cadvisor
          cd $(go env GOMODCACHE)/..
          tar czf ${CI_PROJECT_DIR}/mod.tar.gz mod
          cd -
          echo #2
          docker buildx build --platform=${BUILDX_PLATFORM} --cache-from ${{ env.GHCR }}/vremenar/cache/cadvisor:${CADVISOR_VERSION} --cache-to ${{ env.GHCR }}/vremenar/cache/cadvisor:${CADVISOR_VERSION} --build-arg CADVISOR_VERSION -f Dockerfile.deploy -t ${{ env.GHCR }}/vremenar/cadvisor-docker:${CADVISOR_VERSION} -t ${{ env.GHCR }}/vremenar/cadvisor-docker:latest -t ${{ env.GHCR }}/vremenar/cadvisor-docker:${{ steps.date.outputs.date }} --push "."
      - name: Push image to Docker Hub
        run: |
          docker buildx imagetools create \
            --tag ${{ env.DOCKER }}/vremenar/cadvisor-docker:latest \
            --tag ${{ env.DOCKER }}/vremenar/cadvisor-docker:${{ steps.date.outputs.date }} \
            ${{ env.GHCR }}/vremenar/cadvisor-docker:latest
  image-vulnerability-scan:
    runs-on: ubuntu-latest
    needs:
      - build-and-push
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.GHCR }}/vremenar/${{ env.IMAGENAME }}:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'